from email.mime import base
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from sklearn.metrics import confusion_matrix, matthews_corrcoef
import itertools
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.ensemble import ExtraTreesClassifier
import streamlit as st
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB

st.title("Churn Prediction and Customer Segmentation")
def metrics(cm):
  TP  = cm[1][1]
  TN = cm[0][0]
  FP = cm[0][1]
  FN = cm[1][0]
  accuracy = (TP+TN)/(TP+TN+FP+FN)
  precision = TP/(TP+FP) 
  recall = TP/(TP+FN)
  f1_score = (2*precision*recall)/(precision+recall)
  return accuracy*100,precision*100,recall*100,f1_score*100


n = st.selectbox("Select Dataset", ("Select","Dataset 1","Dataset 2","Dataset 3"))
if n == "Dataset 1":
    action = st.selectbox("Select action",("Select","Dataset Description","Churn Prediction","Customer Segmentation"))
    if action=="Dataset Description":
        dataset1 = pd.read_csv("dataset1.csv")
        st.header("Dataset")
        st.write(dataset1)
        st.write("Instances: ",dataset1.shape[0])
        st.write("Number of Attributes: ",dataset1.shape[1])
        st.write("Attributes in dataset: ",dataset1.columns)
    if action=="Churn Prediction":
        dataset1 = pd.read_csv("dataset1_processed.csv")
        X = dataset1.drop('Churn',axis=1)
        y = dataset1['Churn']
        st.header("Churn Prediction")
        choice = st.selectbox("Select",("Select","Run model without SMOTE","Run model with SMOTE"))
        if choice=="Run model without SMOTE":
            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest without SMOTE")
                random_forest = RandomForestClassifier()
                random_forest.fit(X_train,y_train)
                yrf_pred = random_forest.predict(X_test)
                cnf_rf = confusion_matrix(y_test,yrf_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_rf)
                st.write("Confusion Matrix")
                st.write(cnf_rf)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree without SMOTE")
                decision_tree = DecisionTreeClassifier(max_features=10,max_leaf_nodes=20,random_state=1)
                decision_tree.fit(X_train,y_train)
                ydt_pred = decision_tree.predict(X_test)
                cnf_dt = confusion_matrix(y_test,ydt_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_dt)
                st.write("Confusion Matrix")
                st.write(cnf_dt)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression without SMOTE")
                logistic_reg = LogisticRegression(penalty = 'l1',solver='liblinear',random_state = 1)
                logistic_reg.fit(X_train,y_train)
                lr_pred = logistic_reg.predict(X_test)
                cnf_lr = confusion_matrix(y_test,lr_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_lr)
                st.write("Confusion Matrix")
                st.write(cnf_lr)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes without SMOTE")
                model_nb = GaussianNB()
                model_nb.fit(X_train, y_train.ravel())
                y_pred_nb = model_nb.predict(X_test)
                cnf_nb = confusion_matrix(y_test,y_pred_nb)
                accuracy,precision,recall,f1_score = metrics(cnf_nb)
                st.write("Confusion Matrix")
                st.write(cnf_nb)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                st.header("AdaBoost without SMOTE")
                model_ada = AdaBoostClassifier(learning_rate= 1,n_estimators= 25,random_state=42)
                model_ada.fit(X_train, y_train)
                y_pred_ada = model_ada.predict(X_test)
                cnf_ada = confusion_matrix(y_test,y_pred_ada)
                accuracy,precision,recall,f1_score = metrics(cnf_ada)
                st.write("Confusion Matrix")
                st.write(cnf_ada)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                st.header("Multi layer Perceptron without SMOTE")
                model_multi = MLPClassifier(solver='adam',hidden_layer_sizes=(10,))
                model_multi.fit(X_train,y_train)
                y_pred_multi = model_multi.predict(X_test)
                cnf_multi = confusion_matrix(y_test,y_pred_multi)
                accuracy,precision,recall,f1_score = metrics(cnf_multi)
                st.write("Confusion Matrix")
                st.write(cnf_multi)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
        if choice=="Run model with SMOTE":
            from imblearn.over_sampling import SMOTE
            smote=SMOTE(random_state=0)
            X_smote,y_smote = smote.fit_resample(X,y)
            X_train_smote, X_test_smote, y_train_smote, y_test_smote = train_test_split(X_smote, y_smote, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest with SMOTE")
                model_rfcla_smote = RandomForestClassifier(n_estimators=10,max_features=15,max_leaf_nodes=25,random_state=42)
                model_rfcla_smote.fit(X_train_smote, y_train_smote)
                pred_rfcla_smote = model_rfcla_smote.predict(X_test_smote)
                cnf_rfcla_smote = confusion_matrix(y_test_smote,pred_rfcla_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_rfcla_smote)
                st.write("Confusion Matrix")
                st.write(cnf_rfcla_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree with SMOTE")
                decision_tree_smote = DecisionTreeClassifier(max_features=15,max_leaf_nodes=20,random_state=1)
                decision_tree_smote.fit(X_train_smote,y_train_smote)
                ydt_pred_smote = decision_tree_smote.predict(X_test_smote)
                cnf_dt_smote = confusion_matrix(y_test_smote,ydt_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_dt_smote)
                st.write("Confusion Matrix")
                st.write(cnf_dt_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression with SMOTE")
                logistic_reg_smote = LogisticRegression(penalty = 'l2',solver='liblinear',random_state = 1)
                logistic_reg_smote.fit(X_train_smote,y_train_smote)
                lr_pred_smote = logistic_reg_smote.predict(X_test_smote)
                cnf_logistic_smote = confusion_matrix(y_test_smote,lr_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_logistic_smote)
                st.write("Confusion Matrix")
                st.write(cnf_logistic_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes with SMOTE")
                model_nb_smote = GaussianNB()
                model_nb_smote.fit(X_train_smote, y_train_smote.ravel())
                y_pred_nb_smote = model_nb_smote.predict(X_test_smote)
                cnf_nb_smote = confusion_matrix(y_test_smote,y_pred_nb_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_nb_smote)
                st.write("Confusion Matrix")
                st.write(cnf_nb_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                model_ada_smote = AdaBoostClassifier(learning_rate= 1,n_estimators= 60,random_state=42)
                model_ada_smote.fit(X_train_smote, y_train_smote)
                y_pred_ada_smote = model_ada_smote.predict(X_test_smote)
                cnf_ada_smote = confusion_matrix(y_test_smote,y_pred_ada_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_ada_smote)
                st.write("Confusion Matrix")
                st.write(cnf_ada_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                model_multi_smote = MLPClassifier(solver='adam',hidden_layer_sizes=(10,))
                model_multi_smote.fit(X_train_smote,y_train_smote)
                y_pred_multi_smote = model_multi_smote.predict(X_test_smote)
                cnf_multi_smote = confusion_matrix(y_test_smote,y_pred_multi_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_multi_smote)
                st.write("Confusion Matrix")
                st.write(cnf_multi_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
    if action=="Customer Segmentation":
        st.header("Customer Segmentation")
        data = pd.read_csv('dataset1_processed.csv')
        data = data.drop('Churn',axis=1)
        kms = KMeans(n_clusters=3,init='k-means++')
        kms.fit(data)
        clusters = data.copy()
        clusters['Cluster_Prediction'] = kms.fit_predict(data)
        count_samples = clusters['Cluster_Prediction'].value_counts()
        st.write("Samples in cluster 1: ",count_samples[0])
        st.write("Samples in cluster 2: ",count_samples[1])
        st.write("Samples in cluster 3: ",count_samples[2])
if n =="Dataset 2":
    action = st.selectbox("Select action",("Select","Dataset Description","Churn Prediction","Customer Segmentation"))
    if action=="Dataset Description":
        dataset2 = pd.read_csv("trainmini.csv")
        st.header("Dataset")
        st.write(dataset2)
        st.write("Instances: ",dataset2.shape[0])
        st.write("Number of Attributes: ",dataset2.shape[1])
        st.write("Attributes in dataset: ",dataset2.columns)
    if action=="Churn Prediction":
        dataset2 = pd.read_csv("dataset2_processed.csv")
        X = dataset2.drop('churn',axis=1)
        y = dataset2['churn']
        st.header("Churn Prediction")
        choice = st.selectbox("Select",("Select","Run model without SMOTE","Run model with SMOTE"))
        if choice=="Run model without SMOTE":
            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest without SMOTE")
                random_forest = RandomForestClassifier(n_estimators=10,max_features=15,max_leaf_nodes=30)
                random_forest.fit(X_train,y_train)
                yrf_pred = random_forest.predict(X_test)
                cnf_rf = confusion_matrix(y_test,yrf_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_rf)
                st.write("Confusion Matrix")
                st.write(cnf_rf)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree without SMOTE")
                decision_tree = DecisionTreeClassifier(max_features=15,max_leaf_nodes=20,random_state=1)
                decision_tree.fit(X_train,y_train)
                ydt_pred = decision_tree.predict(X_test)
                cnf_dt = confusion_matrix(y_test,ydt_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_dt)
                st.write("Confusion Matrix")
                st.write(cnf_dt)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression without SMOTE")
                logistic_reg = LogisticRegression(penalty = 'l2',solver='sag',random_state = 1)
                logistic_reg.fit(X_train,y_train)
                lr_pred = logistic_reg.predict(X_test)
                cnf_lr = confusion_matrix(y_test,lr_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_lr)
                st.write("Confusion Matrix")
                st.write(cnf_lr)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes without SMOTE")
                model_nb = GaussianNB()
                model_nb.fit(X_train, y_train.ravel())
                y_pred_nb = model_nb.predict(X_test)
                cnf_nb = confusion_matrix(y_test,y_pred_nb)
                accuracy,precision,recall,f1_score = metrics(cnf_nb)
                st.write("Confusion Matrix")
                st.write(cnf_nb)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                st.header("AdaBoost without SMOTE")
                model_ada = AdaBoostClassifier(learning_rate= 0.5,n_estimators= 15,random_state=42)
                model_ada.fit(X_train, y_train)
                y_pred_ada = model_ada.predict(X_test)
                cnf_ada = confusion_matrix(y_test,y_pred_ada)
                accuracy,precision,recall,f1_score = metrics(cnf_ada)
                st.write("Confusion Matrix")
                st.write(cnf_ada)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                st.header("Multi layer Perceptron without SMOTE")
                model_multi = MLPClassifier(solver='lbfgs',hidden_layer_sizes=(50,))
                model_multi.fit(X_train,y_train)
                y_pred_multi = model_multi.predict(X_test)
                cnf_multi = confusion_matrix(y_test,y_pred_multi)
                accuracy,precision,recall,f1_score = metrics(cnf_multi)
                st.write("Confusion Matrix")
                st.write(cnf_multi)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
        if choice=="Run model with SMOTE":
            from imblearn.over_sampling import SMOTE
            smote=SMOTE(random_state=0)
            X_smote,y_smote = smote.fit_resample(X,y)
            X_train_smote, X_test_smote, y_train_smote, y_test_smote = train_test_split(X_smote, y_smote, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest with SMOTE")
                model_rfcla_smote = RandomForestClassifier(n_estimators=35,max_features=15,max_leaf_nodes=45,random_state=42)
                model_rfcla_smote.fit(X_train_smote, y_train_smote)
                pred_rfcla_smote = model_rfcla_smote.predict(X_test_smote)
                cnf_rfcla_smote = confusion_matrix(y_test_smote,pred_rfcla_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_rfcla_smote)
                st.write("Confusion Matrix")
                st.write(cnf_rfcla_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree with SMOTE")
                decision_tree_smote = DecisionTreeClassifier(max_features=15,max_leaf_nodes=20,random_state=1)
                decision_tree_smote.fit(X_train_smote,y_train_smote)
                ydt_pred_smote = decision_tree_smote.predict(X_test_smote)
                cnf_dt_smote = confusion_matrix(y_test_smote,ydt_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_dt_smote)
                st.write("Confusion Matrix")
                st.write(cnf_dt_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression with SMOTE")
                logistic_reg_smote = LogisticRegression(penalty = 'l2',solver='sag',random_state = 1)
                logistic_reg_smote.fit(X_train_smote,y_train_smote)
                lr_pred_smote = logistic_reg_smote.predict(X_test_smote)
                cnf_logistic_smote = confusion_matrix(y_test_smote,lr_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_logistic_smote)
                st.write("Confusion Matrix")
                st.write(cnf_logistic_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes with SMOTE")
                model_nb_smote = GaussianNB()
                model_nb_smote.fit(X_train_smote, y_train_smote.ravel())
                y_pred_nb_smote = model_nb_smote.predict(X_test_smote)
                cnf_nb_smote = confusion_matrix(y_test_smote,y_pred_nb_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_nb_smote)
                st.write("Confusion Matrix")
                st.write(cnf_nb_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                model_ada_smote = AdaBoostClassifier(learning_rate= 0.6,n_estimators= 25,random_state=42)
                model_ada_smote.fit(X_train_smote, y_train_smote)
                y_pred_ada_smote = model_ada_smote.predict(X_test_smote)
                cnf_ada_smote = confusion_matrix(y_test_smote,y_pred_ada_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_ada_smote)
                st.write("Confusion Matrix")
                st.write(cnf_ada_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                model_multi_smote = MLPClassifier(solver='lbfgs',hidden_layer_sizes=(25,))
                model_multi_smote.fit(X_train_smote,y_train_smote)
                y_pred_multi_smote = model_multi_smote.predict(X_test_smote)
                cnf_multi_smote = confusion_matrix(y_test_smote,y_pred_multi_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_multi_smote)
                st.write("Confusion Matrix")
                st.write(cnf_multi_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
    if action=="Customer Segmentation":
        st.header("Customer Segmentation")
        data = pd.read_csv('dataset2_processed.csv')
        data = data.drop('churn',axis=1)
        kms = KMeans(n_clusters=3,init='k-means++')
        kms.fit(data)
        clusters = data.copy()
        clusters['Cluster_Prediction'] = kms.fit_predict(data)
        count_samples = clusters['Cluster_Prediction'].value_counts()
        st.write("Samples in cluster 1: ",count_samples[0])
        st.write("Samples in cluster 2: ",count_samples[1])
        st.write("Samples in cluster 3: ",count_samples[2])
if n=="Dataset 3":
    dataset3 = pd.read_csv("dataset3train.csv")
    action = st.selectbox("Select Option",("Select","Dataset Description","Churn Prediction","Customer Segmentation"))
    if action=="Dataset Description":
        st.header("Dataset")
        st.write(dataset3)
        st.write("Instances: ",dataset3.shape[0])
        st.write("Number of Attributes: ",dataset3.shape[1])
        st.write("Attributes in dataset: ",dataset3.columns)
    if action=="Churn Prediction":
        dataset3 = pd.read_csv("dataset3_processed.csv")
        X = dataset3.drop('Churn',axis=1)
        y = dataset3['Churn']
        st.header("Churn Prediction")
        choice = st.selectbox("Select",("Select","Run model without SMOTE","Run model with SMOTE"))
        if choice=="Run model without SMOTE":
            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest without SMOTE")
                random_forest = RandomForestClassifier(n_estimators=10,max_features=10,max_leaf_nodes=35)
                random_forest.fit(X_train,y_train)
                yrf_pred = random_forest.predict(X_test)
                cnf_rf = confusion_matrix(y_test,yrf_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_rf)
                st.write("Confusion Matrix")
                st.write(cnf_rf)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree without SMOTE")
                decision_tree = DecisionTreeClassifier(max_features=15,max_leaf_nodes=25,random_state=1)
                decision_tree.fit(X_train,y_train)
                ydt_pred = decision_tree.predict(X_test)
                cnf_dt = confusion_matrix(y_test,ydt_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_dt)
                st.write("Confusion Matrix")
                st.write(cnf_dt)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression without SMOTE")
                logistic_reg = LogisticRegression(penalty = 'l1',solver='liblinear',random_state = 1)
                logistic_reg.fit(X_train,y_train)
                lr_pred = logistic_reg.predict(X_test)
                cnf_lr = confusion_matrix(y_test,lr_pred)
                accuracy,precision,recall,f1_score = metrics(cnf_lr)
                st.write("Confusion Matrix")
                st.write(cnf_lr)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes without SMOTE")
                model_nb = GaussianNB()
                model_nb.fit(X_train, y_train.ravel())
                y_pred_nb = model_nb.predict(X_test)
                cnf_nb = confusion_matrix(y_test,y_pred_nb)
                accuracy,precision,recall,f1_score = metrics(cnf_nb)
                st.write("Confusion Matrix")
                st.write(cnf_nb)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                st.header("AdaBoost without SMOTE")
                model_ada = AdaBoostClassifier(learning_rate= 0.4,n_estimators= 17,random_state=42)
                model_ada.fit(X_train, y_train)
                y_pred_ada = model_ada.predict(X_test)
                cnf_ada = confusion_matrix(y_test,y_pred_ada)
                accuracy,precision,recall,f1_score = metrics(cnf_ada)
                st.write("Confusion Matrix")
                st.write(cnf_ada)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                st.header("Multi layer Perceptron without SMOTE")
                model_multi = MLPClassifier(solver='adam',hidden_layer_sizes=(50,))
                model_multi.fit(X_train,y_train)
                y_pred_multi = model_multi.predict(X_test)
                cnf_multi = confusion_matrix(y_test,y_pred_multi)
                accuracy,precision,recall,f1_score = metrics(cnf_multi)
                st.write("Confusion Matrix")
                st.write(cnf_multi)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
        if choice=="Run model with SMOTE":
            from imblearn.over_sampling import SMOTE
            smote=SMOTE(random_state=0)
            X_smote,y_smote = smote.fit_resample(X,y)
            X_train_smote, X_test_smote, y_train_smote, y_test_smote = train_test_split(X_smote, y_smote, random_state=0, test_size=0.3)
            model = st.selectbox("Select",("Select","Logistic Regression","Decision Tree",
            "Random Forest","Naive Bayes","AdaBoost","Multi layer Perceptron"))
            if model=="Select":
                pass
            if model == "Random Forest":
                st.header("Random Forest with SMOTE")
                model_rfcla_smote = RandomForestClassifier(n_estimators=25,max_features=20,max_leaf_nodes=45    ,random_state=42)
                model_rfcla_smote.fit(X_train_smote, y_train_smote)
                pred_rfcla_smote = model_rfcla_smote.predict(X_test_smote)
                cnf_rfcla_smote = confusion_matrix(y_test_smote,pred_rfcla_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_rfcla_smote)
                st.write("Confusion Matrix")
                st.write(cnf_rfcla_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model =="Decision Tree":
                st.header("Decision Tree with SMOTE")
                decision_tree_smote = DecisionTreeClassifier(max_features=10,max_leaf_nodes=35,random_state=1)
                decision_tree_smote.fit(X_train_smote,y_train_smote)
                ydt_pred_smote = decision_tree_smote.predict(X_test_smote)
                cnf_dt_smote = confusion_matrix(y_test_smote,ydt_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_dt_smote)
                st.write("Confusion Matrix")
                st.write(cnf_dt_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Logistic Regression":
                st.header("Logistic Regression with SMOTE")
                logistic_reg_smote = LogisticRegression(penalty = 'l1',solver='liblinear',random_state = 1)
                logistic_reg_smote.fit(X_train_smote,y_train_smote)
                lr_pred_smote = logistic_reg_smote.predict(X_test_smote)
                cnf_logistic_smote = confusion_matrix(y_test_smote,lr_pred_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_logistic_smote)
                st.write("Confusion Matrix")
                st.write(cnf_logistic_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Naive Bayes":
                st.header("Naive Bayes with SMOTE")
                model_nb_smote = GaussianNB()
                model_nb_smote.fit(X_train_smote, y_train_smote.ravel())
                y_pred_nb_smote = model_nb_smote.predict(X_test_smote)
                cnf_nb_smote = confusion_matrix(y_test_smote,y_pred_nb_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_nb_smote)
                st.write("Confusion Matrix")
                st.write(cnf_nb_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="AdaBoost":
                model_ada_smote = AdaBoostClassifier(learning_rate= 1.0,n_estimators= 50,random_state=42)
                model_ada_smote.fit(X_train_smote, y_train_smote)
                y_pred_ada_smote = model_ada_smote.predict(X_test_smote)
                cnf_ada_smote = confusion_matrix(y_test_smote,y_pred_ada_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_ada_smote)
                st.write("Confusion Matrix")
                st.write(cnf_ada_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
            if model=="Multi layer Perceptron":
                model_multi_smote = MLPClassifier(solver='adam',hidden_layer_sizes=(30,))
                model_multi_smote.fit(X_train_smote,y_train_smote)
                y_pred_multi_smote = model_multi_smote.predict(X_test_smote)
                cnf_multi_smote = confusion_matrix(y_test_smote,y_pred_multi_smote)
                accuracy,precision,recall,f1_score = metrics(cnf_multi_smote)
                st.write("Confusion Matrix")
                st.write(cnf_multi_smote)
                st.write("Accuracy(%): ",accuracy)
                st.write("Precision(%): ",precision)
                st.write("Recall(%): ",recall)
                st.write("F1-Score(%): ",f1_score)
    if action=="Customer Segmentation":
        st.header("Customer Segmentation")
        data = pd.read_csv('dataset3_processed.csv')
        data = data.drop('Churn',axis=1)
        kms = KMeans(n_clusters=3,init='k-means++')
        kms.fit(data)
        clusters = data.copy()
        clusters['Cluster_Prediction'] = kms.fit_predict(data)
        count_samples = clusters['Cluster_Prediction'].value_counts()
        st.write("Samples in cluster 1: ",count_samples[0])
        st.write("Samples in cluster 2: ",count_samples[1])
        st.write("Samples in cluster 3: ",count_samples[2])

    